import java.util.*;

public class Employees {
    public static void main(String[] args) {
        // initialize heap with employee records
        PriorityQueue<EmployeeRecord> heap = new PriorityQueue<>();
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter employee records (employee number and hourly rate): ");
        String input = scanner.nextLine();
        while (!input.isEmpty()) {
            String[] tokens = input.split(" ");
            int employeeNumber = Integer.parseInt(tokens[0]);
            double hourlyRate = Double.parseDouble(tokens[1]);
            heap.offer(new EmployeeRecord(employeeNumber, hourlyRate));
            System.out.print("Enter employee records (employee number and hourly rate): ");
            input = scanner.nextLine();
        }

        // allow user to insert or delete records
        while (true) {
            System.out.print("Enter 'i' to insert a record, 'd' to delete a record, or 'q' to quit: ");
            String action = scanner.nextLine();
            if (action.equals("i")) {
                System.out.print("Enter employee number and hourly rate: ");
                String[] tokens = scanner.nextLine().split(" ");
                int employeeNumber = Integer.parseInt(tokens[0]);
                double hourlyRate = Double.parseDouble(tokens[1]);
                heap.offer(new EmployeeRecord(employeeNumber, hourlyRate));
            } else if (action.equals("d")) {
                System.out.print("Enter employee number to delete: ");
                int employeeNumber = Integer.parseInt(scanner.nextLine());
                heap.removeIf(record -> record.getEmployeeNumber() == employeeNumber);
            } else if (action.equals("q")) {
                break;
            }
        }

        // sort updated list using heap sort
        List<EmployeeRecord> sortedRecords = new ArrayList<>();
        while (!heap.isEmpty()) {
            sortedRecords.add(heap.poll());
        }

        // display sorted list
        System.out.println("Employee records (sorted by employee number):");
        for (EmployeeRecord record : sortedRecords) {
            System.out.println(record.getEmployeeNumber() + ": " + record.getHourlyRate());
        }
    }

    private static class EmployeeRecord implements Comparable<EmployeeRecord> {
        private int employeeNumber;
        private double hourlyRate;

        public EmployeeRecord(int employeeNumber, double hourlyRate) {
            this.employeeNumber = employeeNumber;
            this.hourlyRate = hourlyRate;
        }

        public int getEmployeeNumber() {
            return employeeNumber;
        }

        public double getHourlyRate() {
            return hourlyRate;
        }

        @Override
        public int compareTo(EmployeeRecord other) {
            return Integer.compare(employeeNumber, other.employeeNumber);
        }
    }
}
